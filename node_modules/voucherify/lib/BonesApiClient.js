'use strict';

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var request = require('request');
var when = require('when');

var errorMessage = function errorMessage(statusCode, body) {
  body = body || {};
  body.toString = function () {
    return 'Unexpected status code: ' + statusCode + ' - Details: ' + (0, _stringify2.default)(body);
  };
  return body;
};

var prepare = function prepare(_callback) {
  var deferred = when.defer();

  if (typeof _callback === 'function') {
    return {
      callback: function callback(error, res, body) {
        if (error || res.statusCode >= 400) {
          _callback(error || errorMessage(res.statusCode, body));
          return;
        }

        _callback(null, body);
      }
    };
  } else {
    return {
      promise: deferred.promise,
      callback: function callback(error, res, body) {
        if (error || res.statusCode >= 400) {
          deferred.reject(error || errorMessage(res.statusCode, body));
          return;
        }

        deferred.resolve(body);
      }
    };
  }
};

module.exports = function () {
  function BonesApiClient(_ref) {
    var auth = _ref.auth,
        tenant = _ref.tenant,
        projectId = _ref.projectId;
    (0, _classCallCheck3.default)(this, BonesApiClient);

    console.info({ auth: auth, tenant: tenant, projectId: projectId });
    this.basePath = 'https://dl.voucherify.io/api/v1';
    this.headers = {
      'Authorization': auth,
      'X-Tenant': tenant,
      'X-Project-Id': projectId
    };
  }

  (0, _createClass3.default)(BonesApiClient, [{
    key: 'prepareOptions',
    value: function prepareOptions(path, options) {
      return (0, _assign2.default)({
        url: '' + this.basePath + path,
        headers: this.headers,
        json: true
      }, options);
    }
  }, {
    key: 'get',
    value: function get(path, qs, callback) {
      var handler = prepare(callback);
      request.get(this.prepareOptions(path, { qs: qs }), handler.callback);
      return handler.promise;
    }
  }, {
    key: 'post',
    value: function post(path, body, callback) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      var handler = prepare(callback);
      request.post(this.prepareOptions(path, (0, _assign2.default)({}, { body: body }, options)), handler.callback);
      return handler.promise;
    }
  }, {
    key: 'put',
    value: function put(path, body, callback) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      var handler = prepare(callback);
      request.put(this.prepareOptions(path, (0, _assign2.default)({}, { body: body }, options)), handler.callback);
      return handler.promise;
    }
  }, {
    key: 'delete',
    value: function _delete(path, callback) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      var handler = prepare(callback);
      request.del(this.prepareOptions(path, options), handler.callback);
      return handler.promise;
    }
  }]);
  return BonesApiClient;
}();